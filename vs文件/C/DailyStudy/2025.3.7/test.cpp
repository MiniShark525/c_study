#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
int main(void)
{
	int n = 9;
	//0000 0000 0000 0000 0000 0000 0000 1001
	float* pFloat = (float*)&n;//float和int都是4字节，所以int*和float*解引用能力一样，这里不转换类型没影响
	printf("%d\n", n);//9
	printf("%f\n", *pFloat);//0.000000
	//S = 0; E = -126; M = 0 0000 0000 0000 0000 1001;  非常小，打印出来的6位都是0
	*pFloat = 9.0;//1001.0	S = 0; E = 3 + 127; M = 1.001
	//0100 0001 0001 0000 0000 0000 0000 0000
	//41 10 00 00
	printf("%d\n", n);//1091567616	用整形的方法去翻译就得到一个超大的数
	printf("%f\n", *pFloat);//9.000000  用浮点数方法翻译就是正常值
	printf("%f\n", (float)n);//1091567616.000000
	//(float)n的地址下存的4e 82 20 00
	//0100 1110 1000 0010 0010 0000 0000 0000
	//S = 0; E = 157 - 127 = 30; M = 0 0010 0010 0000 0000 0000;
	//解释：把1091567616赋值给一个浮点数，在用浮点数的方式拿出来（强制类型转换的意义）
	printf("%d\n", (int)*pFloat);//9
	//解释：把9.0赋值给一个整形，在用整形方式打印出来
	return 0;
}